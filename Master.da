import xml.etree.ElementTree as ET

class Object:
	def __init__(self,id,type):
		self.id = id
		self.type = type

class Request:
	'''
	the following dictionaries will contain all attributes of the resource
	and subject that the client/coordinator has any information about
	'''
	def  __init__(self,subject,resource,action_type):
		self.subject = subject
		self.resource = resource
		self.action = action_type
		self.resource_defread = []
		self.subject_defread = []
		self.resource_mightRead =[]
		self.subject_mightRead = []
		self.mightWriteObj = []
		self.objects = []

def isSame(x,obj):
	if x.id == obj.id and x.type == obj.type:
		return True
	return False

def PopulateRequest(req):
	tree = ET.parse('policy-example.xml')
	root = tree.getroot()
	rules_match = 0
	subj_attributes = {}
	res_attributes = {}
	for rule in root.iter('rule'):
		rc = rule.find('resourceCondition').attrib["type"]
		act = rule.find('action').attrib["name"]
		sc = rule.find('subjectCondition').attrib["type"]
		
		if sc == req.subject.type and rc == req.resource.type and act == req.action:
			rules_match += 1
			sc_attribs = rule.find('subjectCondition').attrib.keys()
			for key in sc_attribs:
				if key in subj_attributes:
					subj_attributes[key] = subj_attributes[key] + 1
				else:
					subj_attributes[key] = 1
			rc_attribs = rule.find('resourceCondition').attrib.keys()
			for key in rc_attribs:
				if key in res_attributes:
					res_attributes[key] = res_attributes[key] + 1
				else:
					res_attributes[key] = 1

	#print(rules_match)
	for key in subj_attributes:
		if subj_attributes[key] == rules_match:
			req.subject_defread.append(key)
		else:
			req.subject_mightRead.append(key)
	
	for key in res_attributes:
		if res_attributes[key] == rules_match:
			req.resource_defread.append(key)
		else:
			req.resource_mightRead.append(key)


def defReadAttr(x,req):
	if isSame(x,req.subject) == True:
		if len(req.subject_defread) != 0:
			return req.subject_defread
		else:
			PopulateRequest(req)
			return req.subject_defread

	elif isSame(x,req.resource):
		if len(req.resource_defread) != 0:
			return req.resource_defread
		else:
			PopulateRequest(req)
			return req.resource_defread

def mightReadAttr(x,req):
	if isSame(x,req.subject) == True:
		return req.subject_mightRead

	elif isSame(x,req.resource):
		return req.resource_mightRead

def main():
	subject = Object(567,"employee")
	resource = Object(789,"bank")
	action_type = "read"
	req = Request(subject,resource,action_type)
	print(defReadAttr(resource,req))
	print(mightReadAttr(resource,req))

