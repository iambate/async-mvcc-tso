import xml.etree.ElementTree as ET
import logging
import os
import sys
import queue
THIS_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(THIS_DIR + "/..")
from config import master_config
common = import_da('common')

class Result:
    def __init__(self, decision = 'deny', updatedObj = None, updates = []):
        self.decision = decision        # deny or permit
        self.updatedObj = updatedObj    # object that will be updated
        self.updates = updates          # {attr1: value1, attr2: value2, ..]

def apply_Operation(old_val_of_attr,operation):
    if operation == '++':
        old_val_of_attr =int(old_val_of_attr) + 1
    elif operation == "--":
        old_val_of_attr = int(old_val_of_attr)  - 1
    else:
        return operation
    
    return old_val_of_attr
def Match(curr_val_of_attribute, val_to_match_against):
    if val_to_match_against == 'empty':
        val_to_match_against = ""
    elif val_to_match_against[0] == '<' or val_to_match_against[0] == '>' or val_to_match_against[0] == '=':
        ans = eval(str(curr_val_of_attribute) + str(val_to_match_against))
        return ans
    if curr_val_of_attribute == val_to_match_against:
        return True
    return False


def staticAnalysis(req):
    tree = ET.parse(THIS_DIR + '/../policy-example.xml')
    root = tree.getroot()
    rules_match = 0
    subj_attributes = {}
    res_attributes = {}
    R = []
    for rule in root.iter('rule'):
        rc = rule.find('resourceCondition').attrib["type"]
        act = rule.find('action').attrib["name"]
        sc = rule.find('subjectCondition').attrib["type"]
        subject = req.subject
        resource = req.resource

        if sc == subject.type and rc == resource.type and act == req.action:
            R.append(rule)
    return R

def _add_attrs(attr, d):
    if d:
        attr += list(d)

def getAttrNeeded(rule, type):
    attrs = []
    if type == common.ObjectTypeEnum.SUBJECT:
        sc_attribs = rule.find('subjectCondition').attrib.keys()
        _add_attrs(attrs, sc_attribs)
        sub_write=rule.find('subjectUpdate')
        _add_attrs(attrs, sub_write)
    else:
        rc_attribs = rule.find('resourceCondition').attrib.keys()
        _add_attrs(attrs, rc_attribs)
        res_write=rule.find('resourceUpdate')
        _add_attrs(attrs, res_write)
    return attrs

class Worker(process):
    def setup(coords_list, dbs_list, requestNo):
        self.logger = logging.getLogger(__name__)
        self.q = queue.Queue()

    def evaluate(rule, req):
        decision = None
        updatedObj = None
        updates = dict()
        '''
        req: readAttr[1] = {1_attr1:ver, 1_attr2:ver,....} for objects[1]

        '''
        sc = rule.find('subjectCondition')
        rc=rule.find('resourceCondition')
        act=rule.find('action')
        if req.subject == common.obj(req,1):
            sub_index = 1
            res_index = 2
        else:
            sub_index = 2
            res_index = 1
        
        count_match_sub_attr = 0
        for rule_attr in sc.attrib.keys():
            output(req.readAttr)
            curr_val_of_attribute = req.readAttr[sub_index][rule_attr].value
            val_to_match_against = sc.attrib[rule_attr]
            if Match(curr_val_of_attribute, val_to_match_against):
                count_match_sub_attr += 1
        if count_match_sub_attr != len(sc.attrib.keys()):
            result = Result(decision,updatedObj,updates)
            return result

        count_match_sub_attr = 0
        for rule_attr in rc.attrib.keys():
            curr_val_of_attribute = req.readAttr[res_index][rule_attr].value
            val_to_match_against = rc.attrib[rule_attr]
            if Match(curr_val_of_attribute, val_to_match_against):
                count_match_sub_attr += 1

        if count_match_sub_attr != len(rc.attrib.keys()):
            result = Result(decision,updatedObj,updates)
            return result
        
        sUpdate=rule.find('subjectUpdate')
        rUpdate=rule.find('resourceUpdate')
        if sUpdate == None and rUpdate == None:
            result = Result('permit',updatedObj,updates)
            return result
        if sUpdate != None:
            updatedObj = req.subject
            for attribute_to_update in sUpdate.attrib:
                old_val_of_attr = req.readAttr[sub_index][attribute_to_update].value
                operation = sUpdate.attrib[attribute_to_update]
                updates[attribute_to_update]=apply_Operation(old_val_of_attr,operation) #returns updated value
            result = Result('permit',updatedObj,updates)
            return result
        else:
            updatedObj = req.resource
            for attribute_to_update in rUpdate.attrib:
                old_val_of_attr = req.readAttr[res_index][attribute_to_update].value
                operation = rUpdate.attrib[attribute_to_update]
                updates[attribute_to_update]=apply_Operation(old_val_of_attr,operation) #returns updated value
            result = Result('permit',updatedObj,updates)
            return result
        
    def readFromDB(R, objs, attr_from_db, rule_no, db_no):
        for i in [1, 2]:
            unique_db_req = str(R.id) + str(rule_no) + str(i)
            output("Sending Read to Db: %s", unique_db_req)
            send(('Read', unique_db_req, objs[i-1], attr_from_db[i], R.ts), to=self.dbs_list[0])
            await(some(received(('ReadDbResponse', id, newR)), has=(id==unique_db_req)))
            output("Received response from Db: %s", unique_db_req)
            for attr in newR.keys():#gargi
                R.readAttr[i][attr] = newR[attr]
        return R

    def doWork(work):
        rules = work['rules']
        R = work['request']
        output("Proceeding to Work: %s", R)
        p= work['fromProcess']
        coords_list = work['coords_list']
        worker_no = work['worker_no']
        o1 = common.obj(R, 1)
        o2 = common.obj(R, 2)
        rule_no = 0
        for rule in rules:
            attr_list = {}
            if o1 == R.subject:
                attr_list[1] = getAttrNeeded(rule, common.ObjectTypeEnum.SUBJECT)
                attr_list[2] = getAttrNeeded(rule, common.ObjectTypeEnum.RESOURCE)
            else:
                attr_list[2] = getAttrNeeded(rule, common.ObjectTypeEnum.SUBJECT)
                attr_list[1] = getAttrNeeded(rule, common.ObjectTypeEnum.RESOURCE)

            attr_from_db = {1:[], 2: []}
            for i in [1,2]:
                for attrs in attr_list[i]:
                    if attrs in R.cachedUpdates[i] and R.cachedUpdates[i][attrs].value != None:
                        if attrs not in R.readAttr[i]:#gargi
                            R.readAttr[i][attrs] = {}
                        R.readAttr[i][attrs] = R.cachedUpdates[i][attrs]
                    else:
                        attr_from_db[i] += [attrs]
            R = readFromDB(R, [o1,o2], attr_from_db, rule_no, worker_no)
            result = self.evaluate(rule, R)
            if result.decision == 'permit' or result.decision == 'deny':
                            break
            rule_no += 1
        if result.decision == None:
            R.decision = 'deny'
        else:
            R.decision = result.decision
        if result.updatedObj == None:
            # Read Request
            R.updatedObj = -1
            R.rdOnlyObj = -1
            R.updates = dict()
            output("Result after evaluating %s rule/s: %s", str(rule_no), str(R))
            send(('Response', R), to=R.client)
            output("Read Only Request. Sending request to client: %s", R)
            for i in [1, 2]:
                send(('ReadAttr', R, i), to=common.coord(common.obj(R,i), coords_list))
        else:
            # Write Request
            # updates[attribute_to_update]=apply_Operation(old_val_of_attr,operation)
            if result.updatedObj == common.obj(R, 1):
                R.updatedObj = 1
                for attr in result.updates.keys():
                    R.readAttr[1][attr] = result.updates[attr]
                R.rdOnlyObj = 2
            else:
                R.updatedObj = 2
                for attr in result.updates.keys():
                    R.readAttr[2][attr] = result.updates[attr]
                R.rdOnlyObj = 1
            R.updates = result.updates

            output("Result after evaluating %s rule/s: %s", str(rule_no), str(R))
            send(('Result', R), to=common.coord(common.obj(R, R.updatedObj), coords_list))

    def run():
        while True:
            await(received(('Done')) or not self.q.empty())
            if not self.q.empty():
                doWork(self.q.get())
            else:
                break

    def receive(msg=('Request', R), from_=p):
        output("Request received by worker: %s", R)
        rules = staticAnalysis(R)
        work = {}
        work['rules'] = rules
        work['request'] = R
        work['fromProcess'] = p
        work['coords_list'] = self.coords_list
        work['worker_no'] = self.coords_list.index(p)
        self.q.put(work)
