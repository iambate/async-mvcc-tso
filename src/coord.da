import commonpy
import copy
import logging
import queue
import random
import os
import sys
import time
THIS_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(THIS_DIR + "/..")
from config import master_config
common = import_da('common')

CACHE = {}

def latestVersionBefore(x, attr, ts):
    global CACHE
    prevI = []
    if x.id in CACHE and attr in CACHE[x.id]:
        prevI = commonpy.max_version((list(i for i in CACHE[x.id][attr] if i.wts < ts)))

    if prevI == []:
        if x.id not in CACHE:
            CACHE[x.id] = {}
        if attr not in CACHE[x.id]:
            CACHE[x.id][attr] = []
        CACHE[x.id][attr].insert(0, common.Versions())
        prevI = CACHE[x.id][attr][0]
    return prevI


def cachedUpdates(x, req):
    cu = {}
    l = list(set(common.mightReadAttr(x, req)) | set(common.defReadAttr(x,req)))
    for attrs in l:
        attrVersion = latestVersionBefore(x, attrs, req.ts)
        cu[attrs] = copy.deepcopy(attrVersion)
        #cu = {attr1:<version> ,attr2:<version>,..}
    return cu



class Coord(process):
    def setup(coords_list, workers_list, dbs_list, requestNo):
        global CACHE
        self._CACHE = CACHE
        self.sessionID = common.now()
        self.logger = logging.getLogger(__name__)
        self.waitingq = queue.Queue()
        sys.setrecursionlimit(10000)

    def run():
        if await(received("Done")): output("Coordinator Exiting...")
        elif check_if_any_empty(): pass

    def print_cache(printstr,req):
        #global CACHE
        output(printstr," ",req.id," ",req.ts,"\n")
        for i in self._CACHE:
            output("\n",i,":","\n")
            for j in self._CACHE[i]:
                output("\n",j,":")
                for k in self._CACHE[i][j]:
                    output(k.rts," ",str(k.wts)," ",k.pendingMightRead)
                    output("\n")

    def check_if_empty(tobeRead, x, req):
        count_empty = 0
        for attr in tobeRead:
            if  len(latestVersionBefore(x,attr,req.ts).pendingMightWrite) == 0 or \
                (len(latestVersionBefore(x,attr,req.ts).pendingMightWrite) == 1 and req.id in latestVersionBefore(x,attr,req.ts).pendingMightWrite):
                count_empty += 1

        if count_empty == len(tobeRead):
            return True
        return False

    def receive(msg=('Request', req, n), from_=p):
        x = common.obj(req,n)
        if x == req.subject:
            output("Request received at ", n , " coordinator, which is subject coordinator:", req)
        else:
            output("Request received at ", n , " coordinator, which is resource coordinator:", req)
        if n == 1:
            req.ts = common.now()
        tobeRead = list(set(common.mightReadAttr(x, req)) | set(common.defReadAttr(x,req)) | set(common.mightWriteAttr(x, req)))
        output("Start waiting before proceeding to work: %s", str(req))
        request = {}
        request["req"] = req
        request["n"] = n
        request["x"] = x
        request["tobeRead"] = tobeRead
        self.waitingq.put(request)

    def check_if_any_empty():
        q = queue.Queue()
        while not self.waitingq.empty():
            r = self.waitingq.get()
            if check_if_empty(r["tobeRead"], r["x"], r["req"]):
                self.handle_request(r["req"], r["n"], r["x"])
            else:
                q.put(r)
        while not q.empty():
            r = q.get()
            self.waitingq.put(r)
        return False

    def handle_request(req, n, x):
        output("Stop waiting before proceeding to work: %s", str(req))


        if (len(common.mightWriteObj(req)) == 0): #its a read only req
            for attr in common.defReadAttr(x, req):
                latestVersionBefore(x, attr, req.ts).rts = req.ts
        else:
            for attr in common.defReadAttr(x,req):
                if req.id not in latestVersionBefore(x, attr, req.ts).pendingMightRead:
                    latestVersionBefore(x, attr, req.ts).pendingMightRead.append(req.id)
        if req.restarted == True:
            output("Restarted Request gets Priority")
            for attr in common.mightWriteAttr(x, req):
                if req.id not in latestVersionBefore(x, attr, req.ts).pendingMightWrite:
                    latestVersionBefore(x, attr, req.ts).pendingMightWrite.append(req.id)

        for attr in common.mightReadAttr(x, req):
            if req.id not in latestVersionBefore(x, attr, req.ts).pendingMightRead:
                latestVersionBefore(x, attr, req.ts).pendingMightRead.append(req.id)

        print_cache = ""
        for i in self._CACHE:
            print_cache += "OBJECT:"+str(i)+":"
            for j in self._CACHE[i]:
                print_cache+="ATTRIBUTE:"+j +":"
                for k in self._CACHE[i][j]:
                    print_cache+="VERSION: RTS:"+str(k.rts)+",WTS:"+str(k.wts)+",PMR:"+str(k.pendingMightRead)+",PMW:"+str(k.pendingMightWrite)
        output("CACHE CONTENT AFTER 1ST ARRIVAL OF REQ WITH Req._ID:",req._id,"Req.ts:",req.ts,",",print_cache)

        req.cachedUpdates[n] = cachedUpdates(x, req)
        if n == 1:
            send(('Request',req,2),to=common.coord(common.obj(req,2), coords_list))
        else:
            send(('Request',req),to=workers_list[req._id % 2])

    def receive(msg=('ReadAttr', req, i)):
        output("Entering received a ReadAttr request for object: %d, Request: "+ str(req), i)
        x = common.obj(req, i)
        for attr in list(set(common.mightReadAttr(x, req) + common.defReadAttr(x, req))):
            v = latestVersionBefore(x, attr, req.ts)
            if req.id in v.pendingMightRead:
                output("ReadAttr mightRead :%s", v)
                v.pendingMightRead.remove(req.id)
            if attr in req.readAttr[i].keys():
                output("BEFORE UPDATION:", self._CACHE[x.id][attr])
                if v.rts < req.ts:
                    v.rts = req.ts
        for attr in common.mightWriteAttr(x, req):
            v = latestVersionBefore(x, attr, req.ts)
            if req.id in v.pendingMightRead:
                output("ReadAttr mightRead :%s", v)
                v.pendingMightRead.remove(req.id)
            if req.id in v.pendingMightWrite:
                output("ReadAttr mightWrite :%s", v)
                v.pendingMightWrite.remove(req.id)

        print_cache = ""
        for i in self._CACHE:
            print_cache += "OBJECT:"+str(i)+":"
            for j in self._CACHE[i]:
                print_cache+="ATTRIBUTE:"+j +":"
                for k in self._CACHE[i][j]:
                    print_cache+="VERSION: RTS:"+str(k.rts)+",WTS:"+str(k.wts)+",PMR:"+str(k.pendingMightRead)+",PMW:"+str(k.pendingMightWrite)
        output("COORDINATOR CLEANING UP CHANGES MADE BY COMPLETED REQ WITH Req._ID:",req._id,"Req.ts:",req.ts,",",print_cache)
        
        output("Exiting received a ReadAttr request for object: %d, Request: "+ str(req), i)

    def checkForConflicts(x, req):
        output("In checkForConflict: %s", (req))
        for attr in req.updates.keys():
            v = latestVersionBefore(x,attr,req.ts)
            output("Version: %s", str(v))
            if v.rts > req.ts or v.wts != req.cachedUpdates[req.updatedObj][attr].wts:
                return True
        return False
    
    def condition(x, req):
        count_empty = 0
        for attr in req.updates.keys():
            if len(latestVersionBefore(x,attr,req.ts).pendingMightRead) == 0 \
            or (len(latestVersionBefore(x,attr,req.ts).pendingMightRead) == 1 and \
            req.id in latestVersionBefore(x,attr,req.ts).pendingMightRead):
                count_empty += 1
        if count_empty == len(req.updates):
            return True
        return False


    def receive(msg=('Result',req)):
        output("Entering CACHE: %s and Results: %s", self._CACHE, req)
        if req.ts < self.sessionID:
            return
        x = common.obj(req,req.updatedObj)
        if x == req.subject:
            output("Result received at ", req.updatedObj , " coordinator, which is subject coordinator:", req)
        else:
            output("Result received at ", req.updatedObj , " coordinator, which is resource coordinator:", req)
        print_cache = ""
        for i in self._CACHE:
            print_cache += "OBJECT:"+str(i)+":"
            for j in self._CACHE[i]:
                print_cache+="ATTRIBUTE:"+j +":"
                for k in self._CACHE[i][j]:
                    print_cache+="VERSION: RTS:"+str(k.rts)+",WTS:"+str(k.wts)+",PMR:"+str(k.pendingMightRead)+",PMW:"+str(k.pendingMightWrite)
        output("CACHE CONTENT AFTER 2ND ARRIVAL (BEFORE WAIT) OF REQ WITH Req._ID:",req._id,"Req.ts:",req.ts,",",print_cache)

        conflict = checkForConflicts(x, req)

        if conflict == False:
            for attr in req.updates.keys():
                if req.id not in latestVersionBefore(x, attr, req.ts).pendingMightWrite:
                    latestVersionBefore(x, attr, req.ts).pendingMightWrite.append(req.id)

            timeout = 120 * random.random()

            if await(condition(x, req)):
                conflict = checkForConflicts(x, req)
            elif timeout(timeout):
                output("Exiting CACHE: %s and Results: %s", self._CACHE, req)
                output("Restart Request due to timeout %s: ", req)
                send(('Restart', req, 1), to=common.coord(common.obj(req,1), coords_list))
                send(('Restart', req, 2), to=common.coord(common.obj(req,2), coords_list))
                return
 
            print_cache = ""
            for i in self._CACHE:
                print_cache += "OBJECT:"+str(i)+":"
                for j in self._CACHE[i]:
                    print_cache+="ATTRIBUTE:"+j +":"
                    for k in self._CACHE[i][j]:
                        print_cache+="VERSION: RTS:"+str(k.rts)+",WTS:"+str(k.wts)+",PMR:"+str(k.pendingMightRead)+",PMW:"+str(k.pendingMightWrite)
            output("CACHE CONTENT AFTER 2ND ARRIVAL (AFTER WAIT) OF REQ WITH Req._ID:",req._id,"Req.ts:",req.ts,",",print_cache)

            if not conflict:
                send(("UpdateDatabase",req.updatedObj,req.updates,req.ts),to=dbs_list[0])
                for attr in req.updates.keys():
                    v = common.Versions(req.ts,req.ts,req.updates[attr])
                    self._CACHE[x.id][attr].append(v)
                output("Updating to CACHE in Result version: %s", str(v) )

                AllAttrsRead = list(set(common.mightReadAttr(x, req)) | set(common.defReadAttr(x,req)))
                for attr in AllAttrsRead:
                    v = latestVersionBefore(x,attr,req.ts)
                    output("No conflict: ", v)
                    # Verify Again
                    if req.id in v.pendingMightRead:
                        v.pendingMightRead.remove(req.id)
                    if attr in req.readAttr[req.updatedObj]:
                        v.rts = req.ts

                print_cache = ""
                for i in self._CACHE:
                    print_cache += "OBJECT:"+str(i)+":"
                    for j in self._CACHE[i]:
                        print_cache+="ATTRIBUTE:"+j +":"
                        for k in self._CACHE[i][j]:
                            print_cache+="VERSION: RTS:"+str(k.rts)+",WTS:"+str(k.wts)+",PMR:"+str(k.pendingMightRead)+",PMW:"+str(k.pendingMightWrite)
                output("REQ EVALUATION COMPLETED,SENDING RESPONSE TO CLIENT Req._ID:",req._id,"Req.ts:",req.ts,",",print_cache)
                
                send(('Response', req), to=req.client)
                send(('ReadAttr', req, 1), to=common.coord(common.obj(req,1), coords_list))
                send(('ReadAttr', req, 2), to=common.coord(common.obj(req,2), coords_list))
            else:
                output("Restart Request due to second conflict %s: ", req)
                send(('Restart', req, 1), to=common.coord(common.obj(req,1), coords_list))
                send(('Restart', req, 2), to=common.coord(common.obj(req,2), coords_list))
        else:
            output("Restart Request due to first conflict %s: ", req)
            send(('Restart', req, 1), to=common.coord(common.obj(req,1), coords_list))
            send(('Restart', req, 2), to=common.coord(common.obj(req,2), coords_list))
        output("Exiting CACHE: %s and Results: %s", self._CACHE, req)


    def receive(msg=('Restart', req, n)):
        x = common.obj(req, n)
        
        for attr in list(set(common.mightReadAttr(x, req)) | set(common.defReadAttr(x,req))):
            v = latestVersionBefore(x, attr, req.ts).pendingMightRead
            if req.id in v:
                v.remove(req.id)


        for attr in common.mightWriteAttr(x, req):
            v = latestVersionBefore(x, attr, req.ts).pendingMightWrite
            if req.id in v:
                v.remove(req.id)
        req.readAttr[n] = {}
        req.cachedUpdates[n] = []
        if n == 2:
            req.updates = []
            req.decision = None
            req.updatedObj = -1
            req.rdOnlyObj = -1
            req.restarted = True
            send(('Request', req, 1), to=common.coord(common.obj(req, 1), coords_list))
