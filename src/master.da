import logging
import numpy
import os
import sys
import time
import uuid

THIS_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(THIS_DIR + "/..")

from config import master_config as conf
db = import_da("db")
worker = import_da("worker")
coord = import_da("coord")
common = import_da("common")

class Client(process):
    def setup(coords_list, end_all_proc, requestNo):
        self.logger = logging.getLogger(__name__)

        #output("client process w:",workers_list)
        #output("client process c:",coords_list)
        #output("client process d:",dbs)

    def run():
        requests = conf.cnfg[requestNo].requests
        time_list = []
        if requests:
            for i in requests:
                if conf.cnfg[requestNo].zeroLatency:
                    run_start_ts = common.now()
                subj = common.Object(requests[i]["subjid"], requests[i]["subjtype"])
                res = common.Object(requests[i]["resid"], requests[i]["restype"])
                req = common.Request(subj, res, requests[i]["action"])
                req.requestNo = requestNo
                req.client = self
                if req.resource in common.mightWriteObj(req):
                    obj1 = req.subject
                    obj2 = req.resource
                else:
                    obj1 = req.resource
                    obj2 = req.subject
                req.objects.append(obj1)
                req.objects.append(obj2)
                req._id = int(i)
                # Uncomment this when running stress tests
                # req.id = int(i)

                '''
                wait if in request
                '''
                if "client_wait" in requests[i]:
                    if await(False): pass
                    elif timeout(requests[i]["client_wait"]): pass

                send(('Request', req, 1), to = common.coord(common.obj(req, 1), coords_list))
                if conf.cnfg[requestNo].zeroLatency:
                    await(some(received(('Response', r)), has=(r.id == req.id)))
                    run_stop_ts = common.now()
                    time_list.append(run_stop_ts - run_start_ts)
                    output("Sending next request from client")
        if not conf.cnfg[requestNo].zeroLatency:
            await(len(listof(p, received(('Response', _), from_ = p))) == len(requests))
        else:
            with open(THIS_DIR + "/../log/pref_eval.txt","a") as f:
                f.write("Number of Requests:" + str(len(time_list)) + ", mean: " + str(numpy.mean(time_list)) + ", standard deviation: " + str(numpy.std(time_list)) + "\n")
        send(('END'), to = end_all_proc)
        output("client exiting")

    def receive(msg=('Response', response)):
        output("Response received by Client: %s",str(response))

class clEND(process):
    def setup(coords,dbs,workers,clients):
        pass

    def run():
        await(len(listof(p, received(('END'), from_ = p))) == len(clients))
        send(('Done'), to = list(set(self.coords) |set(self.dbs) | set(self.workers)))
        return


def main():
    # Access configuration

    if len(sys.argv) < 2:
        print("Pass the configuration Number");
        exit(1)
    requestNo = int(sys.argv[1])
    logfile = THIS_DIR + "/../log/request_"+ str(requestNo) + ".log"
    for name in ["coord", "master", "db", "worker"]:
        logger = logging.getLogger(name)
        logger.setLevel(logging.DEBUG)
        handler = logging.FileHandler(logfile)
        handler.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    clients = new(Client, num = 1)
    coords = new(coord.Coord, num = 6)
    workers = new(worker.Worker, num = 12)
    dbs = new(db.DB, num = 1)
    end_all_proc = new(clEND,num = 1)

    setup(end_all_proc,(list(coords), list(dbs), list(workers), list(clients)))
    setup(dbs, (requestNo,))
    setup(workers, (list(coords), list(dbs), requestNo))
    setup(coords, (list(coords), list(workers), list(dbs), requestNo))
    setup(clients, (list(coords), end_all_proc, requestNo))

    start(end_all_proc)
    start(dbs)
    start(workers)
    start(coords)
    start(clients)


