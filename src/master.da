import logging
import os
import sys
import time
import uuid

THIS_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(THIS_DIR + "/..")

from config import master_config as conf
db = import_da("db")
worker = import_da("worker")
coord = import_da("coord")
common = import_da("common")

class Client(process):
    def setup(coords_list, dbs, workers_list, requestNo):
        self.logger = logging.getLogger(__name__)

        #output("client process w:",workers_list)
        #output("client process c:",coords_list)
        #output("client process d:",dbs)

    def run():
        requests = conf.cnfg[requestNo].requests
        if requests:
            for i in requests:
                subj = common.Object(requests[i]["subjid"], requests[i]["subjtype"])
                res = common.Object(requests[i]["resid"], requests[i]["restype"])
                req = common.Request(subj, res, requests[i]["action"])
                req.client = self
                if req.resource in common.mightWriteObj(req):
                    obj1 = req.subject
                    obj2 = req.resource
                else:
                    obj1 = req.resource
                    obj2 = req.subject
                req.objects.append(obj1)
                req.objects.append(obj2)
                req._id = int(i)
                if "client_wait" in requests[i]: time.sleep(requests[i]["client_wait"])
                send(('Request', req, 1), to = common.coord(common.obj(req, 1), coords_list))
        await(len(listof(p, received(('Response', _), from_ = p))) == len(requests))
        send(('Done'), to = list(set(self.workers_list) | set(self.coords_list) | set(self.dbs)))
        #output("client exiting")

    def receive(msg=('Response', response)):
        output("Response received by Client: %s",str(response))


def main():
    # Access configuration

    if len(sys.argv) < 2:
        print("Pass the configuration Number");
        exit(1)
    requestNo = int(sys.argv[1])
    logfile = THIS_DIR + "/../log/request_"+ str(requestNo) + ".log"
    for name in ["coord", "master", "db", "worker"]:
        logger = logging.getLogger(name)
        logger.setLevel(logging.DEBUG)
        handler = logging.FileHandler(logfile)
        handler.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    clients = new(Client, num = 1)
    coords = new(coord.Coord, num = 6)
    workers = new(worker.Worker, num = 12)
    dbs = new(db.DB, num = 1)

    setup(dbs, (requestNo,))
    setup(workers, (list(coords), list(dbs), requestNo))
    setup(coords, (list(coords), list(workers), list(dbs), requestNo))
    setup(clients, (list(coords), list(dbs), list(workers), requestNo))

    start(dbs)
    start(workers)
    start(coords)
    start(clients)

    #output("main process w:",workers)
    #output("main process c:",coords)
    #output("main process d:",dbs)
    #for c in clients: c.join()

    # Terminate the process
    #send(('Done'), to = (workers | coords | dbs))
