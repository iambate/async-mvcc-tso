import logging
import os
import sys
import uuid

THIS_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.append(THIS_DIR + "/..")

from config import master_config as conf
db = import_da("db")
worker = import_da("worker")
coord = import_da("coord")
common = import_da("common")

class Client(process):
    def setup(coords_list, requestNo):
        self.logger = logging.getLogger(__name__)

    def run():
        requests = conf.cnfg[requestNo].requests
        if requests:
            for i in requests:
                subj = common.Object(requests[i]["subjid"], requests[i]["subjtype"])
                res = common.Object(requests[i]["resid"], requests[i]["restype"])
                req = common.Request(subj, res, requests[i]["action"])
                req.client = self
                if req.resource in common.mightWriteObj(req):
                    obj1 = req.subject
                    obj2 = req.resource
                else:
                    obj1 = req.resource
                    obj2 = req.subject
                req.objects.append(obj1)
                req.objects.append(obj2)
                send(('Request', req, 1), to = common.coord(common.obj(req, 1), coords_list))
        await(len(listof(p, received(('Response', _), from_ = p))) == len(requests))

    def receive(msg=('Response', response)):
        self.logger.info(str(response))


def main():
    # Access configuration

    requestNo = int(sys.argv[1])
    logfile = THIS_DIR + "/../log/request_"+ str(requestNo) + ".log"
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    handler = logging.FileHandler(logfile)
    handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    clients = new(Client, num = 1)
    coords = new(coord.Coord, num = 6)
    workers = new(worker.Worker, num = 6)
    dbs = new(db.DB, num = 6)

    setup(dbs, (requestNo,))
    setup(workers, (list(coords), list(dbs), requestNo))
    setup(coords, (list(coords), list(workers), requestNo))
    setup(clients, (list(coords), requestNo))

    start(dbs)
    start(workers)
    start(coords)
    start(clients)

    for c in clients: c.join()

    # Terminate the process
    send(('Done'), to = (workers | coords | dbs))
