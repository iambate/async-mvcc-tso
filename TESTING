1) Standard tests as mentioned in project.txt
---------------------------------------------

Test Case (1):
-------------
The first request is from subject id 1, trying to read BankA(resource id:257)'s document while having BankA already in its history and there's a second request from subject id 2 trying to access the same resource but for the first time.
The policy file is such that for accessing a resource the first time, we check the subject's history but with every subsequent acess we increment a count attribute fo the resource. 
We make the 1st request wait in worker to simulate a delay and show how the system behaves in the folowing scenario:  

The coordinator coord(oW) for the object oW written by a read-write request r receives the result of r from the worker and immediately commits r, because the pendingMightRead sets for relevant attributes are empty; to make this scenario non-trivial, some of those pendingMightRead sets should be non-empty at some time between when coord(oW) forwards r to the worker and when coord(oW) receives the result of r from the worker, and they should contain some other read-write requests as well as some read-only requests.

As per our design, request 2 is added to pendingMightRead for count attribute of resource BankA because it is a write request and is added to pendingMightRead of all attributes it might possibly read or update(hence assumed to read as well prior to updation).  Request 2 is able to complete evaluation and leave the system before request 1 returns from the worker and request 1, seeing an empty pendingMightRead list for attribute count, proceeds to completion.

policy file: policy-example1.xml 
requests file: requests1.py
initial database content file: database1.py


Test Case (2):
-------------
This test case simulates the following scenario:
similar to (1), but the commit of r is delayed, because some of the pendingMightRead sets for relevant attributes are non-empty when coord(oW) receives the result of r from the worker.

The requests, policies and initial database content file used for this are the same as above except that the first request is not delayed at the worker. Instead the second request is delayed so that request 1 has to wait for pendingMightRead list of attribute count to clear out before it proceeds to completion.

policy file: policy-example2.xml 
requests file: requests2.py
initial database content file: database2.py


Test Case (3):
-------------
In the policy file we use for this test case, we update count attribute of a bank resource every time a new client accesses it and do nothing if it turns out that the subject has already had access to the same resource.

We have 2 requests - from subj id 1 trying to gain access to Bank B for the first time, and second from subj id 3 trying to gain access to the same Bank B but it already has BankB in its history.

Request 1 is delayed at the worker. In the meantime, Request 2 reads count, (since it reads all attributes pertaining to  all rules until it reaches the one it matches to), and increments rts of count.Request 1 encounters a conflict as soon as it returns from the worker and restarts.

It simulates the following: the coordinator coord(oW) for the object oW written by a read-write request r receives the result of r from the worker, immediately detects a conflict, and re-starts r.

policy file: policy-example3.xml 
requests file: requests3.py
initial database content file: database3.py


Test Case (4):
-------------
In this test case we demonstrate system behavior in the following case: The coordinator coord(oW) for the object oW written by a read-write request r receives the result of r from the worker, waits for relevant pendingMightReads to be resolved, and then detects a conflict and re-starts r.

We have 2 requests -from subj id 1 accessing BankB and from subj id 3 accessing Bank B. Subj id 1 has an empty history while subj id 3 has Bank B in its history. the policy file used is the same as the one used by test case 3- we are expected to increment count attribute of Bank B for every first time customer.

In this case, both requests get delayed at the worker but request 2 gets delayed for slightly longer. This way when Request 1 returns, it does not see any conflict but it waits for pendingMightRead of count attribute to clear out. However once it does, the conflict check is run again, but it detects a conflict because request 2 would have read count and incremented rts of count. Request 1 then restarts.

policy file: policy-example4.xml 
requests file: requests4.py
initial database content file: database4.py


Test Case (5):
-------------
This one is supposed to be similar to (2), except the client incorrectly predicts which object is written.

We have 2 requests, subj id 1 trying to read Bank A's document and subj id 1 trying to write to Bank A's document. Request 1 gets delayed at the worker for 2 secs while request 2 gets delayed for 5. Subj id 1 has an empty history to begin with. The policy file we use has the following rules:
- The subject is permitted to perform a read action on a resource only if it has an empty history or it has the same resource in its history. 
- For a first time read, the subject's history is appended with the resource.
- For every subsequent read, we increment rcount attribute of the resource.
- For action write, if wcount of resource is less than 4, then we need not read the history value of the subject and allow the operation
- However if wcount of resource is greater than 4 then we allow only those subjects to write which have previously read this resource.

Since the client is unable to decide which coordinator to send the request to at first(the request might be for a first time access or an nth time access, it does not know!), by default it sends the first request to the subject coordinator, which is actually the write coordinator for request 1 since it is a first time access. When request 1 returns from the worker, it will wait for pendingMightRead of history attribute to empty up because request 2 is in it. However, as per the initial values in the database, it turns out that count value of Bank A is less than 4 so writes to Bank A are permitted without having to read history attribute of subject to make sure Bank A is in its history. So once pendingMightread of history attribute empties out, we encounter no conflict and proceed to completion.

policy file: policy-example5.xml 
requests file: requests5.py
initial database content file: database5.py


Test Case (6):
-------------
This one is similar to (4), except the client incorrectly predicts which object is written.

We have 2 requests, both from subj id 1, trying to gain access to the same resource, BankA. The first request is delayed at the worker for 2 secs while the second one is delayed for 5. subj id 1 has an empty history prior to these requests. As per our policy file we have 2 permitted actions, read and write. A first time read(empty history) leads to history updation for subject while a subsequent read leads to increment in rcount attribute of resource. A write will lead to an increment of wcount attribute of the resource, only if its a first time access-i.e., a second write is not acceptable.

Request 1 is a read request while request 2 is a write request. Request 1 is incorrectly sent to subject coordinator at first. When request 1 returns from the worker, it does not see a conflict because rts of history attribute has not been read by any request yet. However it will wait for pendingMightRead list of history to empty out because request 2 is in it. However, in the second conflict test, it will turn out that request 2 has indeed read history value and changed its rts, which is why request 1 will restart.

We realize that the second write should not be permitted from the client side but since client is not waiting for response of first request before it proceeds with the second, we are unable to deny access to request 2.

policy file: policy-example6.xml 
requests file: requests6.py
initial database content file: database6.py
---------------------------------------------------------------------------------------------------------------------------

2) Stress tests/Test Case (7):
-----------------------------
We ran 100 consecutive read requests and 100 consecutive write requests.
The files used were as follows:

policy file: policy-example7.xml 
requests file: requests7.py
initial database content file: database7.py

We merged the test with 100 read requests with test case 7. In this scenario the first request is a write request followed by 100 read requests. The write request is restarted and it can be seen in the log file, that when it comes back for a second round of evaluation, the read requests that arrive after it, are made to wait for its completion before being allowed to proceed.


---------------------------------------------------------------------------------------------------------------------------
3) Performance tests
--------------------
We ran a chain of 1000+ requests and measured the time taken by each request starting from the time it was sent by the client to the time it returns to the client. These timings were stored in a list which was then passed to numpy.mean and numpy.std functions to obtain the average timing and standard deviation. We ran it twice to obtain the following results:
Number of Requests:1000, mean: 0.0135486590862 secs, standard deviation: 0.00258786363081 secs
Number of Requests:1000, mean: 0.0135904724598 secs, standard deviation: 0.00283079635809 secs

For the older system, we obtain a mean timing of 0.01589 secs per request.




